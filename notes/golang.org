* Docs
- https://godoc.org/
- https://gobyexample.com/

* Environment vars
- GOPATH
- GOROOT
- GOBIN: install location for "go build"

* Vars
#+BEGIN_SRC yaml
"_" : unused variable

"...[var]" : variadic parameter

"x := 42" :  short decoration parameter - can only be inside a function - limited scope

"var x = 42" : long decoration parameter - can be outside of a function - unlimited scope

"var x init": default value is 0, false or ""
#+END_SRC

* Types
A value can be more than 1 type

#+BEGIN_SRC bash
`Some string "value"`: string literal

"Primative data type": string, array, struct, pointer

"composite data type": combination of multiple primative data type

# create type 'hotdog' with underlining type is 'int'
type hotdog int

"const a = 42": constant a

"const a = iota": auto increment

#+END_SRC

* Function
** Synctax
#+BEGIN_SRC go
func (r receiver) identifier(parameters) (return(s)) {
//    ^ attaches to type
// func (c Car) makeNoise() {
...
}
#+END_SRC

** Variadic Params
#+BEGIN_SRC go
// Pass in 0 or more value of int
// variadic param needs to be at the end
func foo(s string, x ...int) {
    x == array
}
#+END_SRC

** Defer
#+BEGIN_SRC go
func main {
    // run this function right before main() is done
    defer foo()
}
func foo(){
...
}
#+END_SRC

** Return a function
#+BEGIN_SRC bash
# func [name] func [return type]
# func bar return a func that will return an int
func bar() func() int {
    return func() int {
        return 123
    }
}
#+END_SRC

* Pointer
- performance -> reuse same big data set
- change a value
Everything in go is passed by value

#+BEGIN_SRC bash
"&a": give address stores value of 'a', while '&a' has a type of '*[type]'
"*a": dereference address -> give value stored in that address
#+END_SRC

* Interfaces vs Struct Method
** Struct method
#+BEGIN_SRC go
type Car struct {
    wheels int
}

func (c Car) NumOfWheels() int {
    return c.wheels
}

type Bike struct {
    wheels int
}

func (b Bike) NumOfWheels() int {
    return b.wheels
}
#+END_SRC


** Interface
#+BEGIN_SRC go
type Car struct {
    wheels int
}

func (c Car) NumOfWheels() int {
    return c.wheels
}

type Bike struct {
    wheels int
}

func (b Bike) NumOfWheels() int {
    return b.wheels
}

// any type has NumOfwheels method is also Vehiclewithwheels type
type VehicleWithWheels interface {
    NumOfWheels() int
}

func Handler(v VehicleWithWheels) {
    return something
}
#+END_SRC

* Concurrency
- goroutines: function/method run concurrency
#+begin_src go
var wg sync.WaitGroup
wg.Add(1)
go someFunc() // add wg.Done() inside func
wg.Wait()
#+end_src
